# Uncrustify 0.47
#
# General options
#

newlines                                 lf # { Auto, LF, CR, CRLF }
#  The type of line endings

input_tab_size                           4 # Number
# The original size of tabs in the input

output_tab_size                          4 # Number
# The size of tabs in the output (only used if align_with_tabs=true)

string_escape_char                       92 # Number
# The ascii value of the string escape char, usually 92 (\) or 94 (^). (Pawn)

string_escape_char2                      0
# Alternate string escape char for Pawn. Only works right before the quote char.

#
# Indenting
#

indent_columns                           4 # Number
#  The number of columns to indent per level.
#  Usually 2, 3, 4, or 8.

indent_with_tabs                         0 # Number
#  How to use tabs when indenting code
#  0=spaces only
#  1=indent with tabs, align with spaces
#  2=indent and align with tabs

indent_align_string                      True # { False, True }
#  Whether to indent strings broken by '\' so that they line up

indent_xml_string                        0 # Number
#  The number of spaces to indent multi-line XML strings.
#  Requires indent_align_string=True

indent_brace                             0 # Number
#  Spaces to indent '{' from level

indent_braces                            False # { False, True }
#  Whether braces are indented to the body level

#indent_braces_no_func                    { False, True }
#  Disabled indenting function braces if indent_braces is true

indent_brace_parent                      False # { False, True }
#  Indent based on the size of the brace parent, ie 'if' => 3 spaces, 'for' => 4 spaces, etc.

#indent_namespace                         { False, True }
#  Whether the 'namespace' body is indented

indent_extern                            False # { False, True }
#  Whether the 'extern "C"' body is indented

#indent_class                             { False, True }
#  Whether the 'class' body is indented

#indent_class_colon                       { False, True }
#  Whether to indent the stuff after a leading class colon

indent_func_call_param                   False # { False, True }
#  True:  indent continued function call parameters one indent level
#  False: align parameters under the open paren

indent_func_def_param                    False # { False, True }
#  Same as indent_func_call_param, but for function defs

indent_func_proto_param                  False # { False, True }
#  Same as indent_func_call_param, but for function protos

#indent_func_class_param                  False # { False, True }
#  Same as indent_func_call_param, but for class declarations
#
#indent_func_ctor_var_param               { False, True }
#  Same as indent_func_call_param, but for class variable constructors

indent_func_param_double                 False # { False, True }
#  Double the indent for indent_func_xxx_param options

indent_member                            0 # Number
#  The number of spaces to indent a continued '->' or '.'
#  Usually set to 0, 1, or indent_columns.

#indent_sing_line_comments                3
#  Spaces to indent single line ('//') comments on lines before code
#
#indent_relative_single_line_comments     True # { False, True }
#  If set, will indent trailing single line ('//') comments relative
#  to the code instead of trying to keep the same absolute column

indent_switch_case                       4 # Number
#  Spaces to indent 'case' from 'switch'
#  Usually 0 or indent_columns.

indent_case_shift                        0
#  Spaces to shift the 'case' line, without affecting any other lines
#  Usually 0.

indent_case_brace                        0
#  Spaces to indent '{' from 'case'.
#  By default, the brace will appear under the 'c' in case.
#  Usually set to 0 or indent_columns.

indent_col1_comment                      False # { False, True }
#  Whether to indent comments found in first column

indent_label                             1 # Number
#  How to indent goto labels
#   >0 : absolute column where 1 is the leftmost column
#   <=0 : subtract from brace indent

indent_access_spec                       1 # Number
#  Same as indent_label, but for access specifiers that are followed by a colon

indent_access_spec_body                  False # { False, True }
#  Indent the code after an access specifier by one level.
#  If set, this option forces 'indent_access_spec=0'

indent_paren_nl                          False # { False, True }
#  If an open paren is followed by a newline, indent the next line so that it lines up after the open paren (not recommended)

indent_paren_close                       1 # Number
#  Controls the indent of a close paren after a newline.
#  0: Indent to body level
#  1: Align under the open paren
#  2: Indent to the brace level

indent_comma_paren                       False # { False, True }
#  Controls the indent of a comma when inside a paren.If TRUE, aligns under the open paren

indent_bool_paren                        True # { False, True }
#  Controls the indent of a BOOL operator when inside a paren.If TRUE, aligns under the open paren

indent_square_nl                         False # { False, True }
#  If an open square is followed by a newline, indent the next line so that it lines up after the open square (not recommended)

#indent_preserve_sql                      { False, True }
#  Don't change the relative indent of ESQL/C 'EXEC SQL' bodies

#
# Spacing options
#

sp_arith                                 Add # { Ignore, Add, Remove, Force }
#  Add or remove space around arithmetic operator '+', '-', '/', '*', etc

sp_assign                                Add # { Ignore, Add, Remove, Force }
#  Add or remove space around assignment operator '=', '+=', etc

sp_enum_assign                           Add # { Ignore, Add, Remove, Force }
#  Add or remove space around assignment '=' in enum

sp_bool                                  Add # { Ignore, Add, Remove, Force }
#  Add or remove space around boolean operators '&&' and '||'

sp_compare                               Add # { Ignore, Add, Remove, Force }
#  Add or remove space around compare operator '<', '>', '==', etc

sp_inside_paren                          Add # { Ignore, Add, Remove, Force }
#  Add or remove space inside '(' and ')'

sp_paren_paren                           Add # { Ignore, Add, Remove, Force }
#  Add or remove space between nested parens

sp_balance_nested_parens                 True # { False, True }
#  Whether to balance spaces inside nested parens

sp_paren_brace                           Add # { Ignore, Add, Remove, Force }
#  Add or remove space between ')' and '{'

#sp_before_ptr_star                       Add # { Ignore, Add, Remove, Force }
#  Add or remove space before pointer star '*'

#sp_before_unnamed_ptr_star               Add # { Ignore, Add, Remove, Force }
#  Add or remove space before pointer star '*' that isn't followed by a variable name
#  If set to 'ignore', sp_before_ptr_star is used instead.

#sp_between_ptr_star                      Remove # { Ignore, Add, Remove, Force }
#  Add or remove space between pointer stars '*'

#sp_after_ptr_star                        Add # { Ignore, Add, Remove, Force }
#  Add or remove space after pointer star '*', if followed by a word.

sp_before_byref                          Add # { Ignore, Add, Remove, Force }
#  Add or remove space before reference sign '&'

sp_before_unnamed_byref                  Add # { Ignore, Add, Remove, Force }
#  Add or remove space before reference sign '&' that isn't followed by a variable name
#  If set to 'ignore', sp_before_byref is used instead.

sp_after_byref                           Remove # { Ignore, Add, Remove, Force }
#  Add or remove space after reference sign '&', if followed by a word.

sp_after_type                            Add # { Ignore, Add, Remove, Force }
#  Add or remove space between type and word

#sp_before_angle                          Add # { Ignore, Add, Remove, Force }
#  Add or remove space before '<>'

#sp_after_angle                           Add # { Ignore, Add, Remove, Force }
#  Add or remove space after '<>'

#sp_angle_paren                           { Ignore, Add, Remove, Force }
#  Add or remove space between '<>' and '(' as found in 'new List<byte>();'
#
#sp_angle_word                            { Ignore, Add, Remove, Force }
#  Add or remove space between '<>' and a word as in 'List<byte> m;'

sp_before_sparen                         Remove # { Ignore, Add, Remove, Force }
#  Add or remove space before '(' of 'if', 'for', 'switch', and 'while'

sp_inside_sparen                         Add # { Ignore, Add, Remove, Force }
#  Add or remove space inside if-condition '(' and ')'

sp_after_sparen                          Remove # { Ignore, Add, Remove, Force }
#  Add or remove space after ')' of 'if', 'for', 'switch', and 'while'

sp_sparen_brace                          Add # { Ignore, Add, Remove, Force }
#  Add or remove space between ')' and '{' of 'if', 'for', 'switch', and 'while'

sp_special_semi                          Add # { Ignore, Add, Remove, Force }
#  Add or remove space before empty statement ';' on 'if', 'for' and 'while'

sp_before_semi                           Remove # { Ignore, Add, Remove, Force }
#  Add or remove space before ';'

sp_before_semi_for                       Remove # { Ignore, Add, Remove, Force }
#  Add or remove space before ';' in non-empty 'for' statements

sp_before_semi_for_empty                 Add # { Ignore, Add, Remove, Force }
#  Add or remove space before a semicolon of an empty part of a for statment.

sp_after_semi_for_empty                  Add # { Ignore, Add, Remove, Force }
#  Add or remove space after the final semicolon of an empty part of a for statment: for ( ; ; <here> ).

sp_before_square                         Remove # { Ignore, Add, Remove, Force }
#  Add or remove space before '[' (except '[]')

sp_before_squares                        Remove # { Ignore, Add, Remove, Force }
#  Add or remove space before '[]'

sp_inside_square                         Remove # { Ignore, Add, Remove, Force }
#  Add or remove space inside '[' and ']'

sp_after_comma                           Add # { Ignore, Add, Remove, Force }
#  Add or remove space after ','

sp_before_comma                          Remove # { Ignore, Add, Remove, Force }
#  Add or remove space before ','

#sp_after_class_colon                     { Ignore, Add, Remove, Force }
#  Add or remove space after class ':'
#
#sp_before_class_colon                    { Ignore, Add, Remove, Force }
#  Add or remove space before class ':'
#
#sp_after_operator                        { Ignore, Add, Remove, Force }
#  Add or remove space between 'operator' and operator sign

sp_after_cast                            Ignore # { Ignore, Add, Remove, Force }
#  Add or remove space after cast

sp_inside_paren_cast                     Ignore # { Ignore, Add, Remove, Force }
#  Add or remove spaces inside cast parens

sp_sizeof_paren                          Ignore # { Ignore, Add, Remove, Force }
#  Add or remove space between 'sizeof' and '('

#sp_after_tag                             { Ignore, Add, Remove, Force }
#  Add or remove space after the tag keyword (Pawn)

#sp_inside_braces_enum                    Ignore # { Ignore, Add, Remove, Force }
#  Add or remove space inside enum '{' and '}'
#
#sp_inside_braces_struct                  { Ignore, Add, Remove, Force }
#  Add or remove space inside struct/union '{' and '}'
#
#sp_inside_braces                         { Ignore, Add, Remove, Force }
#  Add or remove space inside '{' and '}'
#
#sp_inside_braces_empty                   { Ignore, Add, Remove, Force }
#  Add or remove space inside '{}'
#
#sp_inside_angle                          { Ignore, Add, Remove, Force }
#  Add or remove space inside '<' and '>'
#
#sp_type_func                             { Ignore, Add, Remove, Force }
#  Add or remove space between return type and function name
#  A minimum of 1 is forced except for pointer return types.

sp_func_proto_paren                      Remove # { Ignore, Add, Remove, Force }
#  Add or remove space between function name and '(' on function declaration

sp_func_def_paren                        Remove { Ignore, Add, Remove, Force }
#  Add or remove space between function name and '(' on function definition

sp_inside_fparens                        Add # { Ignore, Add, Remove, Force }
#  Add or remove space inside empty function '()'

sp_inside_fparen                         Add # { Ignore, Add, Remove, Force }
#  Add or remove space inside function '(' and ')'

#sp_square_fparen                         { Ignore, Add, Remove, Force }
#  Add or remove space between ']' and '(' when part of a function call.
#
#sp_fparen_brace                          { Ignore, Add, Remove, Force }
#  Add or remove space between ')' and '{' of function

#sp_func_call_paren                       { Ignore, Add, Remove, Force }
#  Add or remove space between function name and '(' on function calls
#
#sp_func_class_paren                      { Ignore, Add, Remove, Force }
#  Add or remove space between a constructor/destructor and the open paren

sp_return_paren                          Add # { Ignore, Add, Remove, Force }
#  Add or remove space between 'return' and '('

sp_attribute_paren                       Add # { Ignore, Add, Remove, Force }
#  Add or remove space between '__attribute__' and '('

#sp_macro                                 { Ignore, Add, Remove, Force }
#  Add or remove space between macro and value
#
#sp_macro_func                            { Ignore, Add, Remove, Force }
#  Add or remove space between macro function ')' and value

sp_else_brace                            Add # { Ignore, Add, Remove, Force }
#  Add or remove space between 'else' and '{' if on the same line

sp_brace_else                            Add # { Ignore, Add, Remove, Force }
#  Add or remove space between '}' and 'else' if on the same line

#sp_catch_brace                           { Ignore, Add, Remove, Force }
#  Add or remove space between 'catch' and '{' if on the same line
#
#sp_brace_catch                           { Ignore, Add, Remove, Force }
#  Add or remove space between '}' and 'catch' if on the same line
#
#sp_finally_brace                         { Ignore, Add, Remove, Force }
#  Add or remove space between 'finally' and '{' if on the same line
#
#sp_brace_finally                         { Ignore, Add, Remove, Force }
#  Add or remove space between '}' and 'finally' if on the same line
#
#sp_try_brace                             { Ignore, Add, Remove, Force }
#  Add or remove space between 'try' and '{' if on the same line
#
#sp_getset_brace                          { Ignore, Add, Remove, Force }
#  Add or remove space between get/set and '{' if on the same line
#
#sp_before_dc                             { Ignore, Add, Remove, Force }
#  Add or remove space before the '::' operator
#
#sp_after_dc                              { Ignore, Add, Remove, Force }
#  Add or remove space after the '::' operator
#
#sp_d_array_colon                         { Ignore, Add, Remove, Force }
#  Add or remove around the D named array initializer ':' operator

sp_not                                   Remove # { Ignore, Add, Remove, Force }
#  Add or remove space after the '!' (not) operator.

sp_inv                                   Remove # { Ignore, Add, Remove, Force }
#  Add or remove space after the '~' (invert) operator.

sp_addr                                  Remove # { Ignore, Add, Remove, Force }
#  Add or remove space after the '&' (address-of) operator.
#  This does not affect the spacing after a '&' that is part of a type.

sp_member                                Remove # { Ignore, Add, Remove, Force }
#  Add or remove space around the '.' or '->' operators


sp_deref                                 Remove # { Ignore, Add, Remove, Force }
#  Add or remove space after the '*' (dereference) operator.
#  This does not affect the spacing after a '*' that is part of a type.

sp_sign                                  Remove # { Ignore, Add, Remove, Force }
#  Add or remove space after '+' or '-', as in 'x = -5' or 'y = +7'

sp_incdec                                Remove # { Ignore, Add, Remove, Force }
#  Add or remove space before or after '++' and '--', as in '(--x)' or 'y++;'

#sp_after_oc_scope                        { Ignore, Add, Remove, Force }
#  Add or remove space after the scope '+' or '-', as in '-(void) foo;' or '+(int) bar;'
#
#sp_before_oc_colon                       { Ignore, Add, Remove, Force }
#  Add or remove space after the colon in message specs
#  '-(int) f: (int) x;' vs '+(int) f : (int) x;'
#
#sp_after_oc_type                         { Ignore, Add, Remove, Force }
#  Add or remove space after the (type) in message specs
#  '-(int) f: (int) x;' vs '+(int)f : (int)x;'

#
# Code alignment (not left column spaces/tabs)
#

align_keep_tabs                          False # { False, True }
#  Whether to keep non-indenting tabs

align_with_tabs                          False # { False, True }
#  Whether to use tabs for alinging

align_on_tabstop                         False # { False, True }
#  Whether to bump out to the next tab when aligning

align_number_left                        True # { False, True }
#  Whether to left-align numbers

align_func_params                        True # { False, True }
#  Align variable definitions in prototypes and functions

align_var_def_span                       10 # Number
#  The span for aligning variable definitions (0=don't align)

align_var_def_star_style                 0 # Number
#  How to align the star in variable definitions.
#   0=Part of the type
#   1=Part of the variable
#   2=Dangling
#
align_var_def_amp_style                  0 # Number
#  How to align the '&' in variable definitions.
#   0=Part of the type
#   1=Part of the variable
#   2=Dangling
#
#align_var_def_thresh                     0 # Number
#  The threshold for aligning variable definitions (0=no limit)
#
#align_var_def_gap                        4 # Number
#  The gap for aligning variable definitions
#
align_var_def_colon                      True # { False, True }
#  Whether to align the colon in struct bit fields
#
#align_var_def_inline                     True # { False, True }
#  Whether to align inline struct/enum/union variable definitions

align_assign_span                        0 # Number
#  The span for aligning on '=' in assignments (0=don't align)

align_assign_thresh                      0 # Number
#  The threshold for aligning on '=' in assignments (0=no limit)

align_enum_equ_span                      0 # Number
#  The span for aligning on '=' in enums (0=don't align)

align_enum_equ_thresh                    0 # Number
#  The threshold for aligning on '=' in enums (0=no limit)

align_var_struct_span                    2 # Number
#  The span for aligning struct/union (0=don't align)

align_var_struct_thresh                  50 # Number
#  The threshold for aligning struct/union member definitions (0=no limit)

align_var_struct_gap                     4 # Number
#  The gap for aligning struct/union member definitions

align_struct_init_span                   4
#  The span for aligning struct initializer values (0=don't align)

#align_typedef_gap                        Number
#  The minimum space between the type and the synonym of a typedef

#align_typedef_span                       Number
#  The span for aligning single-line typedefs (0=don't align)

align_typedef_func                       0 # Number
#  How to align typedef'd functions with other typedefs
#  0: Don't mix them at all
#  1: align the open paren with the types
#  2: align the function type name with the other type names

align_typedef_star_style                 2 # Number
#  Controls the positioning of the '*' in typedefs. Just try it.
#  0: Align on typdef type, ignore '*'
#  1: The '*' is part of type name: typedef int  *pint;
#  2: The '*' is part of the type, but dangling: typedef int *pint;

align_typedef_amp_style                  2 # Number
#  Controls the positioning of the '&' in typedefs. Just try it.
#  0: Align on typdef type, ignore '&'
#  1: The '&' is part of type name: typedef int  &pint;
#  2: The '&' is part of the type, but dangling: typedef int &pint;

align_right_cmt_span                     0 # Number
#  The span for aligning comments that end lines (0=don't align)

#align_right_cmt_mix                      { False, True }
#  If aligning comments, mix with comments after '}' and #endif with less than 3 spaces before the comment

align_func_proto_span                    20 # Number
#  The span for aligning function prototypes (0=don't align)

align_func_proto_gap                     2 # Number
#  Minimum gap between the return type and the function name.

align_mix_var_proto                      True # { False, True }
#  Whether to mix aligning prototype and variable declarations.
#  If true, align_var_def_XXX options are used instead of align_func_proto_XXX options.
#
#align_single_line_func                   { False, True }
#  Align single-line functions with function prototypes, uses align_func_proto_span
#
#align_single_line_brace                  { False, True }
#  Aligning the open brace of single-line functions.
#  Requires align_single_line_func=true, uses align_func_proto_span
#
#align_single_line_brace_gap              Number
#  Gap for align_single_line_brace.


#align_oc_msg_spec_span                   Number
#  The span for aligning ObjC msg spec (0=don't align)
#
#align_nl_cont                            { False, True }
#  Whether to align macros wrapped with a backslash and a newline.
#  This will not work right if the macro contains a multi-line comment.
#
#align_pp_define_gap                      Number
#  The minimum space between label and value of a preprocessor define
#
#align_pp_define_span                     Number
#  The span for aligning on '#define' bodies (0=don't align)

#
# Newline adding and removing options
#

nl_collapse_empty_body                   True # { False, True }
#  Whether to collapse empty blocks between '{' and '}'

nl_assign_leave_one_liners               True # { False, True }
#  Don't split one-line braced assignments - 'foo_t f = { 1, 2 };'

#nl_class_leave_one_liners                { False, True }
#  Don't split one-line braced statements inside a class xx { } body

nl_enum_leave_one_liners                 True # { False, True }
#  Don't split one-line enums: 'enum foo { BAR = 15 };'

nl_getset_leave_one_liners               True # { False, True }
#  Don't split one-line get or set functions

nl_func_leave_one_liners                 True # { False, True }
#  Don't split one-line function definitions - 'int foo() { return 0; }'

nl_if_leave_one_liners                   True # { False, True }
#  Don't split one-line if/else statements - 'if(a) b++;'

nl_start_of_file                         Remove # { Ignore, Add, Remove, Force }
#  Add or remove newlines at the start of the file

#nl_start_of_file_min                     Number
#  The number of newlines at the start of the file (only used if nl_start_of_file is 'add' or 'force'

nl_end_of_file                           Add # { Ignore, Add, Remove, Force }
#  Add or remove newline at the end of the file

nl_end_of_file_min                       1 # Number
#  The number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force')

nl_assign_brace                          Ignore # { Ignore, Add, Remove, Force }
#  Add or remove newline between '=' and '{'

#nl_assign_square                         { Ignore, Add, Remove, Force }
#  Add or remove newline between '=' and '[' (D only)
#
#nl_after_square_assign                   { Ignore, Add, Remove, Force }
#  Add or remove newline after '= [' (D only). Will also affect the newline before the ']'

nl_func_var_def_blk                      1 # Number
#  The number of newlines after a block of variable definitions

#nl_fcall_brace                           { Ignore, Add, Remove, Force }
#  Add or remove newline between a function call's ')' and '{', as in:
#  list_for_each(item, &list) { }

nl_enum_brace                            Force # { Ignore, Add, Remove, Force }
#  Add or remove newline between 'enum' and '{'

nl_struct_brace                          Force # { Ignore, Add, Remove, Force }
#  Add or remove newline between 'struct and '{'

nl_union_brace                           Force # { Ignore, Add, Remove, Force }
#  Add or remove newline between 'union' and '{'

nl_if_brace                              Force # { Ignore, Add, Remove, Force }
#  Add or remove newline between 'if' and '{'

nl_brace_else                            Force # { Ignore, Add, Remove, Force }
#  Add or remove newline between '}' and 'else'

nl_elseif_brace                          Force # { Ignore, Add, Remove, Force }
#  Add or remove newline between 'else if' and '{'
#  If set to ignore, nl_if_brace is used instead

nl_else_brace                            Add # { Ignore, Add, Remove, Force }
#  Add or remove newline between 'else' and '{'

#nl_brace_finally                         { Ignore, Add, Remove, Force }
#  Add or remove newline between '}' and 'finally'
#
#nl_finally_brace                         { Ignore, Add, Remove, Force }
#  Add or remove newline between 'finally' and '{'
#
#nl_try_brace                             { Ignore, Add, Remove, Force }
#  Add or remove newline between 'try' and '{'
#
#nl_getset_brace                          { Ignore, Add, Remove, Force }
#  Add or remove newline between get/set and '{'
#
nl_for_brace                             Force # { Ignore, Add, Remove, Force }
#  Add or remove newline between 'for' and '{'
#
#nl_catch_brace                           { Ignore, Add, Remove, Force }
#  Add or remove newline between 'catch' and '{'
#
#nl_brace_catch                           { Ignore, Add, Remove, Force }
#  Add or remove newline between '}' and 'catch'

nl_while_brace                           Force # { Ignore, Add, Remove, Force }
#  Add or remove newline between 'while' and '{'

nl_do_brace                              Force # { Ignore, Add, Remove, Force }
#  Add or remove newline between 'do' and '{'

nl_brace_while                           Force # { Ignore, Add, Remove, Force }
#  Add or remove newline between '}' and 'while' of 'do' statement

nl_switch_brace                          Force { Ignore, Add, Remove, Force }
#  Add or remove newline between 'switch' and '{'

#nl_multi_line_cond                       { False, True }
#  Add or remove newline when condition spans two or more lines

nl_multi_line_define                     True # { False, True }
#  Force a newline in a define after the macro name for multi-line defines.

nl_before_case                           True # { False, True }
#  Whether to put a newline before 'case' statement

#nl_before_throw                          { Ignore, Add, Remove, Force }
#  Add or remove newline between ')' and 'throw'

nl_after_case                            True # { False, True }
#  Whether to put a newline after 'case' statement

#nl_namespace_brace                       { Ignore, Add, Remove, Force }
#  Newline between namespace and {
#
#nl_template_class                        { Ignore, Add, Remove, Force }
#  Add or remove newline between 'template<>' and 'class'
#
#nl_class_brace                           { Ignore, Add, Remove, Force }
#  Add or remove newline between 'class' and '{'
#
#nl_class_init_args                       { Ignore, Add, Remove, Force }
#  Add or remove newline after each ',' in the constructor member initialization

nl_func_type_name                        Add # { Ignore, Add, Remove, Force }
#  Add or remove newline between return type and function name in definition

nl_func_proto_type_name                  Remove # { Ignore, Add, Remove, Force }
#  Add or remove newline between return type and function name in a prototype

nl_func_paren                            Remove # { Ignore, Add, Remove, Force }
#  Add or remove newline between a function name and the opening '('

nl_func_decl_start                       Remove # { Ignore, Add, Remove, Force }
#  Add or remove newline after '(' in a function declaration

nl_func_decl_args                        Force # { Ignore, Add, Remove, Force }
#  Add or remove newline after each ',' in a function declaration

nl_func_decl_end                         Remove # { Ignore, Add, Remove, Force }
#  Add or remove newline before the ')' in a function declaration

nl_fdef_brace                            Force # { Ignore, Add, Remove, Force }
#  Add or remove newline between function signature and '{'

nl_after_return                          False # { False, True }
#  Whether to put a newline after 'return' statement

#nl_after_semicolon                       { False, True }
#  Whether to put a newline after semicolons, except in 'for' statements

#nl_after_brace_open                      { False, True }
#  Whether to put a newline after brace open.
#  This also adds a newline before the matching brace close.
#
#nl_after_brace_open_cmt                  { False, True }
#  If nl_after_brace_open and nl_after_brace_open_cmt are true, a newline is
#  placed between the open brace and a trailing single-line comment.

#nl_after_vbrace_open                     { False, True }
#  Whether to put a newline after a virtual brace open.
#  These occur in un-braced if/while/do/for statement bodies.

nl_define_macro                          False # { False, True }
#  Whether to alter newlines in '#define' macros

#nl_squeeze_ifdef                         { False, True }
#  Whether to not put blanks after '#ifxx', '#elxx', or before '#endif'

nl_before_if                             Ignore # { Ignore, Add, Remove, Force }
#  Add or remove newline before 'if'

nl_after_if                              Ignore # { Ignore, Add, Remove, Force }
#  Add or remove newline after 'if'

nl_before_for                            Ignore # { Ignore, Add, Remove, Force }
#  Add or remove newline before 'for'

nl_after_for                             Ignore # { Ignore, Add, Remove, Force }
#  Add or remove newline after 'for'

nl_before_while                          Ignore # { Ignore, Add, Remove, Force }
#  Add or remove newline before 'while'

nl_after_while                           Add # { Ignore, Add, Remove, Force }
#  Add or remove newline after 'while'

#nl_before_switch                         Ignore # { Ignore, Add, Remove, Force }
#  Add or remove newline before 'switch'
#
#nl_after_switch                          Force # { Ignore, Add, Remove, Force }
#  Add or remove newline after 'switch'

nl_before_do                             Ignore # { Ignore, Add, Remove, Force }
#  Add or remove newline before 'do'

nl_after_do                              Force # { Ignore, Add, Remove, Force }
#  Add or remove newline after 'do'

nl_ds_struct_enum_cmt                    False # { False, True }
#  Whether to double-space commented-entries in struct/enum

nl_ds_struct_enum_close_brace            False # { False, True }
#  Whether to double-space before the close brace of a struct/union/enum

#nl_class_colon                           Ignore # { Ignore, Add, Remove, Force }
#  Add or remove a newline around a class colon.
#  Related to pos_class_colon, nl_class_init_args, and pos_comma.

nl_create_if_one_liner                   False # { False, True }
#  Change simple unbraced if statements into a one-liner
#  'if(b)\n i++;' => 'if(b) i++;'

nl_create_for_one_liner                  False # { False, True }
#  Change simple unbraced for statements into a one-liner
#  'for (i=0;i<5;i++)\n foo(i);' => 'for (i=0;i<5;i++) foo(i);'

nl_create_while_one_liner                False # { False, True }
#  Change simple unbraced while statements into a one-liner
#  'while (i<5)\n foo(i++);' => 'while (i<5) foo(i++);'

#
# Positioning options
#

pos_bool                                 Lead # { Ignore, Lead, Trail }
#  The position of boolean operators in wrapped expressions

#pos_comma                                { Ignore, Lead, Trail }
#  The position of the comma in wrapped expressions

#pos_class_comma                          { Ignore, Lead, Trail }
#  The position of the comma in the constructor initialization list
#
#pos_class_colon                          { Ignore, Lead, Trail }
#  The position of colons between constructor and member initialization

#
# Line Splitting options
#

code_width                               76 # Number
#  Try to limit code width to N number of columns

ls_for_split_full                        False # { False, True }
#  Whether to fully split long 'for' statements at semi-colons

ls_func_split_full                       False # { False, True }
#  Whether to fully split long function protos/calls at commas

#
# Blank line options
#

nl_max                                   3 # Number
#  The maximum consecutive newlines

nl_after_func_proto                      2 # Number
#  The number of newlines after a function prototype, if followed by another function prototype

nl_after_func_proto_group                2 # Number
#  The number of newlines after a function prototype, if not followed by another function prototype

nl_after_func_body                       2 # Number
#  The number of newlines after '}' of a multi-line function body

nl_after_func_body_one_liner             1 # Number
#  The number of newlines after '}' of a single line function body

nl_before_block_comment                  0 # Number
#  The minimum number of newlines before a multi-line comment.
#  Doesn't apply if after a brace open or another multi-line comment.

nl_before_c_comment                      0 # Number
#  The minimum number of newlines before a single-line C comment.
#  Doesn't apply if after a brace open or other single-line C comments.

nl_before_cpp_comment                    0 # Number
#  The minimum number of newlines before a CPP comment.
#  Doesn't apply if after a brace open or other CPP comments.

nl_after_multiline_comment               True # { False, True }
#  Whether to force a newline after a multi-line comment.

#nl_before_access_spec                    1 # Number
#  The number of newlines before a 'private:', 'public:', 'protected:', 'signals:', or 'slots:' label.
#  Will not change the newline count if after a brace open.
#  0 = No change.
#
#nl_after_access_spec                     1 # Number
#  The number of newlines after a 'private:', 'public:', 'protected:', 'signals:', or 'slots:' label.
#  0 = No change.

eat_blanks_after_open_brace              True # { False, True }
#  Whether to remove blank lines after '{'

eat_blanks_before_close_brace            True # { False, True }
#  Whether to remove blank lines before '}'

#
# Code modifying options (non-whitespace)
#

mod_full_brace_do                        Ignore # { Ignore, Add, Remove, Force }
#  Add or remove braces on single-line 'do' statement

mod_full_brace_for                       Ignore # { Ignore, Add, Remove, Force }
#  Add or remove braces on single-line 'for' statement

# mod_full_brace_function                  { Ignore, Add, Remove, Force }
#  Add or remove braces on single-line function defintions. (Pawn)

mod_full_brace_if                        Ignore # { Ignore, Add, Remove, Force }
#  Add or remove braces on single-line 'if' statement

#mod_full_brace_nl                        2
#  Don't remove braces around statements that span N newlines

mod_full_brace_while                     Ignore # { Ignore, Add, Remove, Force }
#  Add or remove braces on single-line 'while' statement

mod_paren_on_return                      Remove # { Ignore, Add, Remove, Force }
#  Add or remove unnecessary paren on 'return' statement

#mod_pawn_semicolon                       { False, True }
#  Whether to change optional semicolons to real semicolons

mod_full_paren_if_bool                   False # { False, True }
#  Add parens on 'while' and 'if' statement around bools

mod_remove_extra_semicolon               True # { False, True }
#  Whether to remove superfluous semicolons

#mod_add_long_function_closebrace_comment Number
#  If a function body exceeds the specified number of newlines and doesn't have a comment after
#  the close brace, a comment will be added.

#mod_add_long_switch_closebrace_comment   Number
#  If a switch body exceeds the specified number of newlines and doesn't have a comment after
#  the close brace, a comment will be added.

#mod_sort_import                          { False, True }
#  If TRUE, will sort consecutive single-line 'import' statements [Java, D]
#
#mod_sort_using                           { False, True }
#  If TRUE, will sort consecutive single-line 'using' statements [C#]

mod_sort_include                         False # { False, True }
#  If TRUE, will sort consecutive single-line '#include' statements [C/C++] and '#import' statements [Obj-C]
#  This is generally a bad idea, as it may break your code.

#mod_move_case_break                      { False, True }
#  If TRUE, it will move a 'break' that appears after a fully braced 'case' before the close brace.

#
# Comment modifications
#

cmt_width                                80 # Number
#  Try to wrap comments at cmt_width columns

#cmt_indent_multi                         False # { False, True }
#  Whether to mess with the indent of multi-line comments

#cmt_c_group                              True # { False, True }
#  Whether to group c-comments that look like they are in a block

#cmt_c_nl_start                           False # { False, True }
#  Whether to put an empty '/*' on the first line of the combined c-comment

#cmt_c_nl_end                             False # { False, True }
#  Whether to put a newline before the closing '*/' of the combined c-comment

#cmt_cpp_group                            True # { False, True }
#  Whether to group cpp-comments that look like they are in a block

#cmt_cpp_nl_start                         False # { False, True }
#  Whether to put an empty '/*' on the first line of the combined cpp-comment

#cmt_cpp_nl_end                           False # { False, True }
#  Whether to put a newline before the closing '*/' of the combined cpp-comment

cmt_cpp_to_c                             True # { False, True }
#  Whether to change cpp-comments into c-comments

#cmt_star_cont                            False # { False, True }
#  Whether to put a star on subsequent comment lines
#
#cmt_sp_before_star_cont                  0 # Number
#  The number of spaces to insert at the start of subsequent comment lines
#
#cmt_sp_after_star_cont                   1 # Number
#  The number of spaces to insert after the star on subsequent comment lines
#
#cmt_insert_file_header                   String
#  The filename that contains text to insert at the head of a file if the file doesn't start with a C/C++ comment.
#  Will substitue $(filename) with the current file's name.

#cmt_insert_func_header                   String
#  The filename that contains text to insert before a function implementation if the function isn't preceeded with a C/C++ comment.
#  Will substitue $(function) with the function name and $(javaparam) with the javadoc @param and @return stuff.
#  Will also substitute $(fclass) with the class name: void CFoo::Bar() { ... }

#cmt_insert_class_header                  String
#  The filename that contains text to insert before a class if the class isn't preceeded with a C/C++ comment.
#  Will substitue $(class) with the class name.

#
# Preprocessor options
#

pp_indent                                Add # { Ignore, Add, Remove, Force }
#  Control indent of preprocessors inside #if blocks at brace level 0
#
pp_indent_at_level                       False # { False, True }
#  Whether to indent #if/#else/#endif at the brace level (true) or from column 1 (false)
#
pp_space                                 Remove # { Ignore, Add, Remove, Force }
##  Add or remove space after # based on pp_level of #if blocks
#
#pp_space_count                           4
##  Sets the number of spaces added with pp_space
#
pp_indent_region                         4
#  The indent for #region and #endregion in C# and '#pragma region' in C/C++
#
#pp_region_indent_code                    True # { False, True }
#  Whether to indent the code between #region and #endregion
#
#pp_indent_if                             4 # Number
#  If pp_indent_at_level=true, sets the indent for #if, #else, and #endif when not at file-level
#
#pp_if_indent_code                        True # { False, True }
#  Control whether to indent the code between #if, #else and #endif when not at file-level
#
#pp_define_at_level                       False # { False, True }
#  Whether to indent '#define' at the brace level (true) or from column 1 (false)

